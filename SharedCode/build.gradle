plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.multiplatform' //version '1.3.31'
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api 'org.jetbrains.kotlin:kotlin-stdlib'
    api  'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.0'
    api 'androidx.appcompat:appcompat:1.0.2'
    api 'androidx.recyclerview:recyclerview:1.1.0-alpha01'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}



kotlin {
    final def iOSPresetTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
    iosX64('ios'){
        compilations.main {
            cinterops {
                myInterop {
                    defFile project.file("frameworks/HUI.def")
                    includeDirs("frameworks/HUI.framework/Headers")
                }

            }
        }
    }

//    iosArm64('ios'){
//        compilations.main {
//            cinterops {
//                myInterop {
//                    defFile project.file("frameworks/HUI.def")
//                    includeDirs("frameworks/HUI.framework/Headers")
//                }
//
//            }
//        }
//    }

    android {

    }

    targets {

        fromPreset(iOSPresetTarget, 'ios') {
            binaries {
                framework('SharedCode')
            }
        }

//        fromPreset(presets.jvm, 'android')

    }

    sourceSets {

        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            api  'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.2.0'
        }

        iosMain.dependencies {
            api  'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.2.0'
        }
    }


}



configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("SharedCode", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

//tasks.build.dependsOn packForXCode